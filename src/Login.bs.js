// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Aws$WhatDidIEat = require("./Aws.bs.js");

function Login$Input(Props) {
  var caption = Props.caption;
  var match = Props.type_;
  var type_ = match !== undefined ? match : "text";
  var onChange = Props.onChange;
  var value = Props.value;
  return React.createElement("div", undefined, caption, React.createElement("input", {
                  type: type_,
                  value: value,
                  onChange: (function (e) {
                      return Curry._1(onChange, e.currentTarget.value);
                    })
                }));
}

var Input = {
  make: Login$Input
};

function errorMessage(error, visible) {
  if (visible) {
    return React.createElement("div", undefined, error);
  } else {
    return null;
  }
}

function Login(Props) {
  var onLoginSuccess = Props.onLoginSuccess;
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            return /* record */[
                    /* loginStatus : LoginInProgress */1,
                    /* username */state[/* username */1],
                    /* password */state[/* password */2]
                  ];
          } else {
            switch (action.tag | 0) {
              case /* LoginFailed */0 :
                  return /* record */[
                          /* loginStatus : LoginError */Block.__(1, [action[0]]),
                          /* username */state[/* username */1],
                          /* password */state[/* password */2]
                        ];
              case /* LoginSuccess */1 :
                  var token = action[0];
                  Curry._1(onLoginSuccess, token);
                  return /* record */[
                          /* loginStatus : LoggedIn */Block.__(0, [token]),
                          /* username */state[/* username */1],
                          /* password */state[/* password */2]
                        ];
              case /* ChangeView */2 :
                  return state;
              case /* ChangeUsername */3 :
                  return /* record */[
                          /* loginStatus */state[/* loginStatus */0],
                          /* username */action[0],
                          /* password */state[/* password */2]
                        ];
              case /* ChangePassword */4 :
                  return /* record */[
                          /* loginStatus */state[/* loginStatus */0],
                          /* username */state[/* username */1],
                          /* password */action[0]
                        ];
              case /* ResetPassword */5 :
                  return /* record */[
                          /* loginStatus : LoginInProgress */1,
                          /* username */state[/* username */1],
                          /* password */state[/* password */2]
                        ];
              case /* NewPassword */6 :
                  return /* record */[
                          /* loginStatus : ChangingPassword */Block.__(2, [
                              action[0],
                              action[1]
                            ]),
                          /* username */state[/* username */1],
                          /* password */state[/* password */2]
                        ];
              
            }
          }
        }), /* record */[
        /* loginStatus : NotLoggedIn */0,
        /* username */"",
        /* password */""
      ]);
  var dispatch = match[1];
  var state = match[0];
  var inputs = function (username, password) {
    return React.createElement("div", undefined, React.createElement(Login$Input, {
                    caption: "Username",
                    onChange: (function (value) {
                        console.log("value", value);
                        return Curry._1(dispatch, /* ChangeUsername */Block.__(3, [value]));
                      }),
                    value: username
                  }), React.createElement(Login$Input, {
                    caption: "Password",
                    onChange: (function (value) {
                        return Curry._1(dispatch, /* ChangePassword */Block.__(4, [value]));
                      }),
                    value: password
                  }));
  };
  var loginButton = function (onClick) {
    return React.createElement("div", undefined, React.createElement("button", {
                    className: "login-button",
                    onClick: onClick
                  }, "Login"));
  };
  var match$1 = state[/* loginStatus */0];
  var tmp;
  var exit = 0;
  if (typeof match$1 === "number") {
    if (match$1 === /* NotLoggedIn */0) {
      exit = 1;
    } else {
      tmp = React.createElement("div", undefined, "Logging in...");
    }
  } else {
    switch (match$1.tag | 0) {
      case /* LoggedIn */0 :
          exit = 1;
          break;
      case /* LoginError */1 :
          tmp = React.createElement("div", undefined, inputs(state[/* username */1], state[/* password */2]), errorMessage(match$1[0], true), loginButton((function (_e) {
                      return Curry._1(dispatch, /* Login */0);
                    })));
          break;
      case /* ChangingPassword */2 :
          var newPassword = match$1[1];
          var user = match$1[0];
          tmp = React.createElement("div", undefined, React.createElement("div", undefined, "Reset password"), React.createElement(Login$Input, {
                    caption: "New password",
                    onChange: (function (value) {
                        return Curry._1(dispatch, /* NewPassword */Block.__(6, [
                                      user,
                                      value
                                    ]));
                      }),
                    value: newPassword
                  }), loginButton((function (_e) {
                      return Curry._1(dispatch, /* ResetPassword */Block.__(5, [
                                    user,
                                    state[/* password */2],
                                    newPassword
                                  ]));
                    })));
          break;
      
    }
  }
  if (exit === 1) {
    tmp = React.createElement("div", undefined, inputs(state[/* username */1], state[/* password */2]), loginButton((function (_e) {
                console.log("current_status", state[/* loginStatus */0]);
                Curry._1(dispatch, /* Login */0);
                var password = state[/* password */2];
                var username = state[/* username */1];
                console.log(username, password);
                Aws$WhatDidIEat.Amplify.signIn(username, password).then((function (result) {
                          console.log("SignInResult: ", result);
                          switch (result.tag | 0) {
                            case /* LoginSuccessful */0 :
                                console.log("success", result[0]);
                                break;
                            case /* LoginFailure */1 :
                                var error = result[0];
                                if (error.tag) {
                                  Curry._1(dispatch, /* LoginFailed */Block.__(0, [Js_option.getWithDefault("", Caml_option.undefined_to_opt(JSON.stringify(error[0])))]));
                                } else {
                                  Curry._1(dispatch, /* LoginFailed */Block.__(0, [error[0]]));
                                }
                                break;
                            case /* LoginChallenge */2 :
                                var user = result[1];
                                console.log("challenge", result[0], user);
                                Curry._1(dispatch, /* NewPassword */Block.__(6, [
                                        user,
                                        ""
                                      ]));
                                break;
                            
                          }
                          return Promise.resolve(/* () */0);
                        })).catch((function (err) {
                        console.log(err);
                        var errMsg = "An error occurred: " + String(err);
                        Curry._1(dispatch, /* LoginFailed */Block.__(0, [errMsg]));
                        return Promise.resolve(/* () */0);
                      }));
                var match = state[/* loginStatus */0];
                if (typeof match === "number") {
                  if (match === /* NotLoggedIn */0) {
                    console.log("Not logged in!!!");
                    return /* () */0;
                  } else {
                    Aws$WhatDidIEat.Amplify.signIn(username, password).then((function (result) {
                              console.log("SignInResult: ", result);
                              switch (result.tag | 0) {
                                case /* LoginSuccessful */0 :
                                    console.log("success", result[0]);
                                    break;
                                case /* LoginFailure */1 :
                                    var error = result[0];
                                    if (error.tag) {
                                      Curry._1(dispatch, /* LoginFailed */Block.__(0, [Js_option.getWithDefault("", Caml_option.undefined_to_opt(JSON.stringify(error[0])))]));
                                    } else {
                                      Curry._1(dispatch, /* LoginFailed */Block.__(0, [error[0]]));
                                    }
                                    break;
                                case /* LoginChallenge */2 :
                                    var user = result[1];
                                    console.log("challenge", result[0], user);
                                    Curry._1(dispatch, /* NewPassword */Block.__(6, [
                                            user,
                                            ""
                                          ]));
                                    break;
                                
                              }
                              return Promise.resolve(/* () */0);
                            })).catch((function (err) {
                            console.log(err);
                            var errMsg = "An error occurred: " + String(err);
                            Curry._1(dispatch, /* LoginFailed */Block.__(0, [errMsg]));
                            return Promise.resolve(/* () */0);
                          }));
                    return /* () */0;
                  }
                } else {
                  switch (match.tag | 0) {
                    case /* LoggedIn */0 :
                        console.log("Logged in", match[0]);
                        return /* () */0;
                    case /* LoginError */1 :
                        console.log("Login error", match[0]);
                        return /* () */0;
                    case /* ChangingPassword */2 :
                        console.log("Changing password", match[1]);
                        return /* () */0;
                    
                  }
                }
              })));
  }
  return React.createElement("form", {
              className: "login",
              onSubmit: (function (e) {
                  e.preventDefault();
                  return /* () */0;
                })
            }, tmp);
}

var make = Login;

exports.Input = Input;
exports.errorMessage = errorMessage;
exports.make = make;
/* react Not a pure module */
