// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var AwsAmplify = require("aws-amplify");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");

function errorToObj(err) {
  var match = Js_json.classify(err);
  if (typeof match !== "number") {
    switch (match.tag | 0) {
      case /* JSONString */0 :
          return /* Message */Block.__(0, [match[0]]);
      case /* JSONObject */2 :
          var obj = match[0];
          var l = List.map(Js_null_undefined.fromOption, List.map((function (param) {
                      return Js_option.andThen(Js_json.decodeString, param);
                    }), List.map((function (param) {
                          return Js_dict.get(obj, param);
                        }), /* :: */[
                        "code",
                        /* :: */[
                          "message",
                          /* :: */[
                            "name",
                            /* [] */0
                          ]
                        ]
                      ])));
          var match$1;
          if (l) {
            var match$2 = l[1];
            if (match$2) {
              var match$3 = match$2[1];
              match$1 = match$3 && !match$3[1] ? /* tuple */[
                  l[0],
                  match$2[0],
                  match$3[0]
                ] : /* tuple */[
                  null,
                  null,
                  null
                ];
            } else {
              match$1 = /* tuple */[
                null,
                null,
                null
              ];
            }
          } else {
            match$1 = /* tuple */[
              null,
              null,
              null
            ];
          }
          return /* Response */Block.__(1, [{
                      code: match$1[0],
                      message: match$1[1],
                      name: match$1[2]
                    }]);
      default:
        
    }
  }
  var errMsg = Js_option.getWithDefault("", Caml_option.undefined_to_opt(JSON.stringify(err)));
  return /* Message */Block.__(0, ["An error occurred: " + errMsg]);
}

function _configure(config) {
  AwsAmplify.default.configure(config);
  return /* () */0;
}

function configure(identityPoolId, region, userPoolId, userPoolWebClientId) {
  AwsAmplify.default.configure({
        Auth: {
          identityPoolId: identityPoolId,
          region: region,
          userPoolId: userPoolId,
          userPoolWebClientId: userPoolWebClientId
        }
      });
  return /* () */0;
}

function changePassword(user, oldPassword, newPassword) {
  return AwsAmplify.Auth.changePassword(user, oldPassword, newPassword).then((function (result) {
                  console.log("Ok", result);
                  return Promise.resolve(/* PasswordChanged */0);
                })).catch((function (err) {
                console.log("Error", err);
                return Promise.resolve(/* PasswordChangeError */[errorToObj(err)]);
              }));
}

function completeNewPassword(user, newPassword) {
  return AwsAmplify.Auth.completeNewPassword(user, newPassword).then((function (result) {
                  console.log("OK!", result);
                  return Promise.resolve(/* PasswordChanged */0);
                })).catch((function (err) {
                console.log("Error completing new password", err);
                return Promise.resolve(/* PasswordChangeError */[errorToObj(err)]);
              }));
}

function signIn(username, password) {
  return AwsAmplify.Auth.signIn(username, password).then((function (result) {
                  console.log(result);
                  var match = result.challengeName;
                  return Promise.resolve((match == null) ? /* LoginSuccessful */Block.__(0, [result]) : /* LoginChallenge */Block.__(2, [
                                  match,
                                  result
                                ]));
                })).catch((function (err) {
                return Promise.resolve(/* LoginFailure */Block.__(1, [errorToObj(err)]));
              }));
}

var Amplify = {
  errorToObj: errorToObj,
  _configure: _configure,
  configure: configure,
  changePassword: changePassword,
  completeNewPassword: completeNewPassword,
  signIn: signIn
};

exports.Amplify = Amplify;
/* aws-amplify Not a pure module */
